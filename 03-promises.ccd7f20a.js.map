{"version":3,"sources":["js/03-promises.js"],"names":["startPromise","document","querySelector","onSubmitCreatePromise","event","preventDefault","delay","value","step","amount","createPromise","position","Promise","resolve","reject","Math","random","i","setTimeout","resalt","then","console","log","catch","addEventListener"],"mappings":";AAOA,MAAMA,EAAeC,SAASC,cAAc,iBAG5C,SAASC,EAAsBC,GAC7BA,EAAMC,iBAEFC,IAAAA,EAAQL,SAASC,cAAc,gBAAgBK,MAC/CC,EAAOP,SAASC,cAAc,eAAeK,MAC7CE,EAASR,SAASC,cAAc,iBAAiBK,MAE3CG,MAAAA,EAAgB,CAACC,EAAUH,IAC9B,IAAII,QAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,IAIhCH,EAAQ,CAACF,SAAAA,EAAUH,KAAAA,IAGnBM,EAAO,CAACH,SAAAA,EAAUH,KAAAA,MAQtB,IAAA,IAAIS,EAAI,EAAGA,GAAKR,EAAQQ,GAAK,EAChCC,WAAW,KACRP,SAAWM,EACXE,OAASF,EAAIT,EAEjBE,EAAcC,SAAUH,GACrBY,KAAK,EAAGT,SAAAA,EAAUH,KAAAA,MAEjBa,QAAQC,2BAA2BX,QAAeQ,eAEnDI,MAAM,EAAGZ,SAAAA,EAAUH,KAAAA,MAClBa,QAAQC,2BAA2BX,QAAeQ,gBAEjDb,GAtCPN,EAAawB,iBAAiB,QAASrB","file":"03-promises.ccd7f20a.js","sourceRoot":"../src","sourcesContent":["// //В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в миллисекундах, шаг увеличения задержки \n// //для каждого промиса после первого и количество промисов которое необходимо создать.\n// //\n\n\n\n\nconst startPromise = document.querySelector('[type=submit]');\n\nstartPromise.addEventListener('click', onSubmitCreatePromise);\nfunction onSubmitCreatePromise(event){\n  event.preventDefault();\n\n  let delay = document.querySelector(\"[name=delay]\").value;\n  let step = document.querySelector(\"[name=step]\").value;\n  let amount = document.querySelector(\"[name=amount]\").value;\n\n      const createPromise = (position, step) => {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3; \n    \n      if (shouldResolve) {\n        // Fulfill\n          resolve({position, step});          \n      }\n        // Reject\n          reject({position, step});\n      \n  \n      \n  })\n}\n\n\n  for(let i = 1; i <= amount; i += 1){\n   setTimeout(() => {\n      position = i;\n      resalt = i * step;\n  \n  createPromise(position, step)\n    .then(({ position, step }) => {\n\n      console.log(`✅ Fulfilled promise ${position} in ${resalt} ms`);\n    })\n    .catch(({ position, step }) => {\n      console.log(`❌ Rejected promise  ${position} in ${resalt} ms`);\n    })\n    }, delay);\n  }\n}\n  "]}