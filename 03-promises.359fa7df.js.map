{"version":3,"sources":["js/03-promises.js"],"names":["startPromise","document","querySelector","newCreatePromise","createPromise","then","position","delay","console","log","catch","addEventListener","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"mappings":";AAGA,MAAMA,EAAeC,SAASC,cAAc,iBAG5C,SAASC,IACPC,EAAc,EAAG,MAChBC,KAAK,EAAGC,SAAAA,EAAUC,MAAAA,MACjBC,QAAQC,2BAA2BH,QAAeC,SAEnDG,MAAM,EAAGJ,SAAAA,EAAUC,MAAAA,MAClBC,QAAQC,0BAA0BH,QAAeC,SAPrDP,EAAaW,iBAAiB,QAASR,GAevC,MAAMC,EAAgB,CAACE,EAAUC,IACxB,IAAIK,QAAQ,CAACC,EAASC,KACrBC,MAAAA,EAAgBC,KAAKC,SAAW,GACtCC,WAAW,KACLH,EAEAF,EAAQ,8BAGRC,EAAO,UAEVP","file":"03-promises.359fa7df.js","sourceRoot":"../src","sourcesContent":["//В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в миллисекундах, шаг увеличения задержки \n//для каждого промиса после первого и количество промисов которое необходимо создать.\n//\nconst startPromise = document.querySelector('[type=submit]');\n\nstartPromise.addEventListener('click', newCreatePromise);\nfunction newCreatePromise(){\n  createPromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n}\n\n\n//Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз,\n//сколько ввели в поле amount. При каждом вызове передай ей номер создаваемого промиса (position) и задержку учитывая введенную пользователем первую задержку (delay) и шаг (step).\n\nconst createPromise = (position, delay) => {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n          resolve('promise виполнился успешно');\n        } else {\n        // Reject\n          reject('error')\n        }\n    }, delay);\n  })\n}\n\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n\n\n//Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров. Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\n\n// const promise = new Promise((resole, reject) => {\n//   const calFulfill = Math.random() > 0.5;\n//   setTimeout(() => {\n//     if(calFulfill){\n//       resole('promise виполнился успешно')\n//     }\n//     reject('promise отклонен, ошибка');\n//   }, 1000);\n// })\n\n// promise.then(\n//   result => {\n//   console.log(`✅ ${result}`);\n// },\n// error => {\n//   console.log(`❌ ${error}`);\n// }\n// );"]}